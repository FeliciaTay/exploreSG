hrefs = getRestaurantLinks()$href
hrefs[1]
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
datum
View(datum)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
links[1]
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(datum)
sdata = datum %>% select(name, href, Address)
library(dplyr)
library(tidyr)
sdata = datum %>% dplyr::select(name, href, Address)
View(sdata)
print(sdata$Address)
library(stringr)
addr = str_extract(sdata$Address, "Singapore ([0-9]+)")
print(addr)
addr = str_extract(sdata$Address, "[0-9]+")
addr = str_extract(sdata$Address, "[0-9]*")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
loc = searchLoc(addr)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(loc)
View(loc)
taddr = str_squish(datum$Address)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(datum)
useful = c("name", "href", "x", "y", "lng", "lat", "Cuisine", "Location", "Menus", "Address", "Hours", "Price")
sdata = datum[, useful]
View(sdata)
odata = datum[, -useful]
sdata = datum[useful]
odata = datum[-useful]
sdata = subset(datum, select = useful)
odata = subset(datum, select = -useful)
sdata = subset(datum, select = c(name, href, x, y, lng, lat, Cuisine, Location, Menus, Address, Hours, Price))
odata = subset(datum, select = -c(name, href, x, y, lng, lat, Cuisine, Location, Menus, Address, Hours, Price))
View(odata)
View(sdata)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(sdata)
View(sdata)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
href = "https://www.chope.co/singapore-restaurants/restaurant/afterglow?source=chope.com.sg"
page = safeReadUrl(href)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
while(nrow(types)>nrow(conts)){# case of empty strings
conts[nrow(conts) + 1, ] = c(NA)
print(nrow(conts))
}
while(nrow(miscs)>nrow(texts)){# case of empty strings
texts[nrow(texts) + 1, ] = c(NA)
print(nrow(texts))
}
types = cbind(t(types), t(miscs))
conts = cbind(t(conts), t(texts))
for(i in 1:length(conts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
useful = c("Cuisine", "Location", "Menus", "Address", "Hours", "Price")
for (i in 1:length(useful)) {
if (!(useful[i] %in% types)){
print(types)
print(conts)
conts = append(conts, "Unknown")
types = append(types, useful[i])
}
}
datum = as.data.frame(conts)
names(datum) = types
View(datum)
datum = as.data.frame(t(conts))
names(datum) = types
View(datum)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(datum)
getRestaurantInfoFromLink(href)
test = getRestaurantInfoFromLink(href)
View(test)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
test = getRestaurantInfoFromLink(href)
links = getRestaurantLinks()
href0 = links$href[1]
test = getRestaurantInfoFromLink(href0)
View(test)
test = getRestaurantInfoFromLink(href)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
test = getRestaurantInfoFromLink(href)
page = safeReadUrl(href)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
for(i in 1:length(conts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
for(i in 1:length(texts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
while(nrow(types)>nrow(conts)){# case of empty strings
conts[nrow(conts) + 1, ] = c(NA)
}
while(nrow(miscs)>nrow(texts)){# case of empty strings
texts[nrow(texts) + 1, ] = c(NA)
}
page = safeReadUrl(href0)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
for(i in 1:length(conts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
for(i in 1:length(texts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
while(nrow(types)>nrow(conts)){# case of empty strings
conts[nrow(conts) + 1, ] = c(NA)
}
while(nrow(miscs)>nrow(texts)){# case of empty strings
texts[nrow(texts) + 1, ] = c(NA)
}
for (i in 1:length(useful)) {
if (!(useful[i] %in% types)){
print(types)
print(conts)
conts = append(conts, "Unknown")
types = append(types, useful[i])
}
}
page = safeReadUrl(href)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
for(i in 1:length(conts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
for(i in 1:length(texts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
while(nrow(types)>nrow(conts)){# case of empty strings
conts[nrow(conts) + 1, ] = c(NA)
}
while(nrow(miscs)>nrow(texts)){# case of empty strings
texts[nrow(texts) + 1, ] = c(NA)
}
types = cbind(t(types), t(miscs))
conts = cbind(t(conts), t(texts))
useful = c("Cuisine", "Location", "Menus", "Address", "Hours", "Price")
for (i in 1:length(useful)) {
if (!(useful[i] %in% types)){
print(types)
print(conts)
conts = append(conts, "Unknown")
types = append(types, useful[i])
}
}
page = safeReadUrl(href)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
for(i in 1:length(conts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
for(i in 1:length(texts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
while(nrow(types)>nrow(conts)){# case of empty strings
conts[nrow(conts) + 1, ] = c(NA)
}
while(nrow(miscs)>nrow(texts)){# case of empty strings
texts[nrow(texts) + 1, ] = c(NA)
}
types = cbind(t(types), t(miscs))
conts = cbind(t(conts), t(texts))
useful = c("Cuisine", "Location", "Menus", "Address", "Hours", "Price")
for (i in 1:length(useful)) {
if (!(useful[i] %in% types)){
print(types)
print(conts)
conts = cbind(conts, "Unknown")
types = cbind(types, useful[i])
}
}
page = safeReadUrl(href)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
for(i in 1:length(conts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
for(i in 1:length(texts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
while(nrow(types)>nrow(conts)){# case of empty strings
conts[nrow(conts) + 1, ] = c(NA)
}
while(nrow(miscs)>nrow(texts)){# case of empty strings
texts[nrow(texts) + 1, ] = c(NA)
}
types = cbind(t(types), t(miscs))
conts = cbind(t(conts), t(texts))
useful = c("Cuisine", "Location", "Menus", "Address", "Hours", "Price")
for (i in 1:length(useful)) {
if (!(useful[i] %in% types)){
print(types)
print(conts)
conts = cbind(conts, c("Unknown"))
types = cbind(types, c(useful[i]))
}
}
View(conts)
View(types)
datum = as.data.frame(conts)
View(datum)
names(datum) = types
View(datum)
test = getRestaurantInfoFromLink(href)
page = safeReadUrl(href)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
for(i in 1:length(conts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
for(i in 1:length(texts)){ # get concise strings
if(is.character(conts[i])) conts[i] = str_squish(conts[i])
}
while(nrow(types)>nrow(conts)){# case of empty strings
conts[nrow(conts) + 1, ] = c(NA)
}
while(nrow(miscs)>nrow(texts)){# case of empty strings
texts[nrow(texts) + 1, ] = c(NA)
}
types = cbind(t(types), t(miscs))
conts = cbind(t(conts), t(texts))
useful = c("Cuisine", "Location", "Menus", "Address", "Hours", "Price")
for (i in 1:length(useful)) {
if (!(useful[i] %in% types)){
print(types)
print(conts)
conts = cbind(conts, c("Unknown"))
types = cbind(types, c(useful[i]))
}
}
datum = as.data.frame(conts)
names(datum) = types
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
test = getRestaurantInfoFromLink(href)
links = getRestaurantLinks()
href0 = links$href[1]
href = "https://www.chope.co/singapore-restaurants/restaurant/afterglow?source=chope.com.sg"
test = getRestaurantInfoFromLink(href)
test = getRestaurantInfoFromLink(href0)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
links = getRestaurantLinks()
View(links)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
refs0 = links %>% slize(1:10)
refs0 = links %>% slice(1:10)
info0 = crawAllRestaurantInfo(refs0)
info_0 = mapply(getRestaurantGeoInfoFromLink, refs0$href)
View(info_0)
View(info_0)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(info1)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(info1)
href180 = links$href[180]
href180
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
debugSource("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
debugSource("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
debugSource("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
debugSource("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
debugSource("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
debugSource("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(testuref)
View(testsref)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(testref)
View(testdf)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(testdf)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(testref)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(testdf)
debugSource("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(testdf)
write.csv(res, "restaurants.csv", row.names = TRUE)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/test.R")
View(res)
rescpy = res
names(rescpy) = c("lng", "lat", "x", "y", "Cuisine", "Location", "Menus", "Address", "Hours", "Price", "html", "name", "href", "success")
View(rescpy)
write.csv(rescpy, "restaurants.csv", row.names = TRUE)
View(rescpy)
href = links$href[1]
page = safeReadUrl(href)
types = getTextDfFromCss(page, ".type")
conts = getTextDfFromCss(page, "li>span~p")
miscs = getTextDfFromCss(page, "h6")
texts = getTextDfFromCss(page, ".section>p:last-child")
View(conts)
View(texts)
url = "https://www.chope.co/singapore-restaurants/list_of_restaurants?source=chope.com.sg&lang=en_US"
page = safeReadUrl(url)
names = getTextDfFromCss(page, ".az-result>ul>li>a")
hrefs = getAttrDfFromCss(page, ".az-result>ul>li>a", "href")
View(names)
rr = rescpy %>% filter(success == 1)
View(rr)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/datascript/restaurants.R")
getAndSaveRestaurantsInfo()
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/datascript/restaurants.R")
getAndSaveRestaurantsInfo()
links = getRestaurantLinks()
View(links)
url = "https://www.chope.co/singapore-restaurants/list_of_restaurants?source=chope.com.sg&lang=en_US"
page = safeReadUrl(url)
names = getTextDfFromCss(page, ".az-result>ul>li>a")
hrefs = getAttrDfFromCss(page, ".az-result>ul>li>a", "href")
View(names)
View(hrefs)
links = getRestaurantLinks()
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/datascript/restaurants.R")
links = getRestaurantLinks()
View(links)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/datascript/restaurants.R")
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/datascript/restaurants.R")
getAndSaveRestaurantsInfo()
res = read.csv("data/restaurants.csv")
setwd("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG")
res = read.csv("data/restaurants.csv")
View(res)
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/datascript/weather.R")
wea = getWeatherForecast()
View(wea)
?addHomeButton
runApp('bzmap.R')
runApp('bzmap.R')
View(wea)
coordinates(wea) = c("lng", "lat")
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
wea = getWeatherForecast()
coordinates(wea) = c("lng", "lat")
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
?addCircleMarkers
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
install.packages("mapview")
library(mapview)
runApp('bzmap.R')
wea = read.csv("data/weather.csv")
wea = getWeatherForecast()
wea$forecast = as.factor(wea$forecast)
View(wea)
runApp('bzmap.R')
runApp('bzmap.R')
files = c("data/hawkers.csv", "data/hotels.csv", "data/mrts.csv", "data/restaurants.csv", "data/taxis.csv", "data/tourism.csv")
labels = c("Hawker Centres", "Hotels", "MRT / LRTs", "Restaurants", "Taxi Stands", "Tourism Info")
len = length(files)
# new environment
context = new.env(parent = emptyenv())
# read tables
context$data = list()
context$name = labels
for(i in 1:len) context$data[[i]] = read.csv(files[i])
# get webdata
context$data.wea = getWeatherForecast()
# compute LocSet
tmploc = data.frame(matrix(ncol = 2, nrow = len))
geonames = c("lng", "lat")
names(tmploc) = geonames
for(i in 1:len){
ss = subset(context$data[[i]], select = geonames)
tmploc = rbind.data.frame(tmploc, ss)
}
tmploc = distinct(tmploc)
View(tmploc)
View(ss)
coordinates(tmploc) = geonames
View(tmploc)
View(context)
View(context)
for(i in 1:len){
ss = subset(context$data[[i]], select = geonames)
tmploc[i, ] = ss[i, ]
}
tmploc = distinct(tmploc)
View(tmploc)
coordinates(tmploc) = geonames
context$extent = extent(tmploc)
for(i in 1:len) coordinates(context$data[[i]]) = geonames
context$map <- getSGLeafletMap(context)
View(context)
runApp('bzmap.R')
runApp('bzmap.R')
?addHomeButton
runApp('bzmap.R')
runApp('bzmap.R')
?addCircleMarkers
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
?UM
?UQ
?as.symbol
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
files = c("data/hawkers.csv", "data/hotels.csv", "data/mrts.csv", "data/restaurants.csv", "data/taxis.csv", "data/tourism.csv")
labels = c("Hawker Centres", "Hotels", "MRT / LRTs", "Restaurants", "Taxi Stands", "Tourism Info")
fields = c("name_of_centre", "Name", "station_name", "name", "TYPE_CD_DE", "Name")
len = length(files)
context = new.env(parent = emptyenv())
# read tables
context$data = list()
context$name = labels
for(i in 1:len) context$data[[i]] = read.csv(files[i])
# get webdata
context$data.wea = getWeatherForecast()
# compute LocSet
tmploc = data.frame(matrix(ncol = 2, nrow = len))
geonames = c("lng", "lat")
names(tmploc) = geonames
for(i in 1:len){
ss = subset(context$data[[i]], select = geonames)
tmploc[i, ] = ss[i, ]
}
tmploc = distinct(tmploc)
coordinates(tmploc) = geonames
context$extent = extent(tmploc)
# convert to spacial data
for(i in 1:len) coordinates(context$data[[i]]) = geonames
# generate color pallette
context$colors = generatePallette(len)
# plot map
context$plotlat = 1.296321
context$plotlng = 103.776718
context$plotzoom = 12
context$popupfields = fields
context$map = getSGLeafletMap(context)
View(context)
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
?UQ
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
runApp('bzmap.R')
