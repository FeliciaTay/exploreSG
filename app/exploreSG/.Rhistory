geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_discrete() +
stat_smooth()
#scale_x_log10(breaks=c(1,10,100)) +
#geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_discrete() +
stat_smooth(method = "lm")
#scale_x_log10(breaks=c(1,10,100)) +
#geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_discrete() +
stat_smooth(method = "glm")
#scale_x_log10(breaks=c(1,10,100)) +
#geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth(method = "lm") +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth(method="loess") +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth(method="gam") +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=goal,y=duration)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth() +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
splitted = split(datam,cut(datam$duration,10))
View(splitted)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = nrows(durationvec) / 10;
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = nrow(durationvec) / 10;
dvec = rep(0,10)
for (i in 1:10) {
dvec[i] = durationvec[dn * i]
}
nrow(durationvec)
ncol(durationvec)
length(durationvec)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 10;
dvec = rep(0,10)
for (i in 1:10) {
dvec[i] = durationvec[dn * i]
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
lst = c("a",1,dvec)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
lst[i] = datam %>% filter(duration < dvec[i])
}
View(lst)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
tmp = datam %>% filter(duration < 30)
sum(tmp$stateNumeric)
View(tmp)
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
plot(dvec, rates)
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
plot(c("<30","30-31",">31"), rates)
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
plot(c(1,2,3), rates)
library(shiny); runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
tagList( # UI elements
titlePanel("Welcome to SG!"),
sidebarLayout(
sidebarPanel(
textInput(ns("txtSearch"), "Type here to search your location:"),
selectInput(ns("drpSelect"), "Available options based on \"\":",searchLoc()$name),
textOutput(ns("txtTableSelectedTitle")),
wellPanel(
tableOutput(ns("tableSelected")),
),
wellPanel(
checkboxGroupInput(ns("chkData"), "Which data sources to show?", vecDataLabels)
)
),
mainPanel(
leafletOutput(outputId = ns("map")),
fluidRow(
wellPanel(
sliderInput(ns("sliDistance")),
checkboxGroupInput(ns("chkOptions"))
),
wellPanel(
textOutput(ns("txtWeather")),
htmlOutput(ns("html"))
)
)
)
)
)
runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
?sliderInput
?checkboxGroupInput
runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
runApp('ProjectCode/exploreSG/app/exploreSG/newApp.R')
wea = getWeatherForecast()
View(wea)
files = c("data/hawkers.csv", "data/hotels.csv", "data/mrts.csv", "data/restaurants.csv", "data/taxis.csv", "data/tourism.csv")
labels = c("Hawker Centres", "Hotels", "MRT / LRTs", "Restaurants", "Taxi Stands", "Tourism Info")
fields = c("name_of_centre", "Name", "station_name", "name", "TYPE_CD_DE", "Name")
len = length(files)
geonames = c("lng", "lat")
locs = data.frame(matrix(ncol = 2, nrow = len))
names(locs) = geonames
context = new.env(parent = emptyenv())
# global vars
context$length = len
context$geonames = geonames
context$plotlat = 1.296321
context$plotlng = 103.776718
context$plotzoom = 12
context$colors = generatePallette(len)
context$icon = makeAwesomeIcon(text=fa("circle"), iconColor="white", markerColor="blue")
context$map = getSGLeafletMap(context)
context$percentage = 100
context$name = labels
context$popupfields = fields
context$data.wea = getWeatherForecast()
context$data = list()
context$sdata = list()
for(i in 1:len) {
dat = read.csv(files[i]) # original
dat = dat %>% mutate(dist = geogDist(lng, lat, context$plotlng, context$plotlat)) %>% arrange(dist)
context$data[[i]] = dat  # with dist
context$sdata[[i]] = dat # spacial
ss = subset(dat, select = geonames)
locs[i, ] = ss[i, ]
}
setwd("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG")
len = length(files)
geonames = c("lng", "lat")
locs = data.frame(matrix(ncol = 2, nrow = len))
names(locs) = geonames
context = new.env(parent = emptyenv())
# global vars
context$length = len
context$geonames = geonames
context$plotlat = 1.296321
context$plotlng = 103.776718
context$plotzoom = 12
context$colors = generatePallette(len)
context$icon = makeAwesomeIcon(text=fa("circle"), iconColor="white", markerColor="blue")
context$map = getSGLeafletMap(context)
context$percentage = 100
context$name = labels
context$popupfields = fields
context$data.wea = getWeatherForecast()
context$data = list()
context$sdata = list()
for(i in 1:len) {
dat = read.csv(files[i]) # original
dat = dat %>% mutate(dist = geogDist(lng, lat, context$plotlng, context$plotlat)) %>% arrange(dist)
context$data[[i]] = dat  # with dist
context$sdata[[i]] = dat # spacial
ss = subset(dat, select = geonames)
locs[i, ] = ss[i, ]
}
len = length(files)
geonames = c("lng", "lat")
locs = data.frame(matrix(ncol = 2, nrow = len))
names(locs) = geonames
context = new.env(parent = emptyenv())
# global vars
context$length = len
context$geonames = geonames
context$plotlat = 1.296321
context$plotlng = 103.776718
context$plotzoom = 12
context$colors = generatePallette(len)
context$icon = makeAwesomeIcon(text=fa("circle"), iconColor="white", markerColor="blue")
context$map = getSGLeafletMap(context)
context$percentage = 100
context$name = labels
context$popupfields = fields
context$data.wea = getWeatherForecast()
context$data = list()
context$sdata = list()
for(i in 1:len) {
dat = read.csv(files[i]) # original
dat = dat %>% rowwise() %>% mutate(dist = geogDist(lng, lat, context$plotlng, context$plotlat)) %>% arrange(dist)
context$data[[i]] = dat  # with dist
context$sdata[[i]] = dat # spacial
ss = subset(dat, select = geonames)
locs[i, ] = ss[i, ]
}
View(locs)
View(dat)
View(dat)
class(dat$lng)
len = length(files)
geonames = c("lng", "lat")
locs = data.frame(matrix(ncol = 2, nrow = 0))
names(locs) = geonames
context = new.env(parent = emptyenv())
# global vars
context$length = len
context$geonames = geonames
context$plotlat = 1.296321
context$plotlng = 103.776718
context$plotzoom = 12
context$colors = generatePallette(len)
context$icon = makeAwesomeIcon(text=fa("circle"), iconColor="white", markerColor="blue")
context$map = getSGLeafletMap(context)
context$percentage = 100
context$name = labels
context$popupfields = fields
context$data.wea = getWeatherForecast()
context$data = list()
context$sdata = list()
for(i in 1:len) {
dat = read.csv(files[i]) # original
dat = dat %>% rowwise() %>% mutate(dist = geogDist(lng, lat, context$plotlng, context$plotlat)) %>% arrange(dist)
context$data[[i]] = dat  # with dist
context$sdata[[i]] = dat # spacial
locs = rbind(locs, subset(dat, select = geonames))
}
locs = distinct(locs)
len = length(files)
geonames = c("lng", "lat")
locs = data.frame(matrix(ncol = 2, nrow = 0))
names(locs) = geonames
context = new.env(parent = emptyenv())
# global vars
context$length = len
context$geonames = geonames
context$plotlat = 1.296321
context$plotlng = 103.776718
context$plotzoom = 12
context$colors = generatePallette(len)
context$icon = makeAwesomeIcon(text=fa("circle"), iconColor="white", markerColor="blue")
context$map = getSGLeafletMap(context)
context$percentage = 100
context$name = labels
context$popupfields = fields
context$data.wea = getWeatherForecast()
context$data = list()
context$sdata = list()
for(i in 1:len) {
dat = read.csv(files[i]) # original
dat = dat %>% rowwise() %>% mutate(dist = geogDist(lng, lat, context$plotlng, context$plotlat)) %>% arrange(dist)
context$data[[i]] = dat  # with dist
context$sdata[[i]] = dat # spacial
locs = rbind(locs, subset(dat, select = geonames))
}
View(locs)
locs = distinct(locs)
class(locs)
class(locs$lng)
class(locs$lat)
locs = distinct(locs)
coordinates(locs) = geonames
context$extent = extent(locs)
for(i in 1:len) coordinates(context$sdata[[i]]) = geonames
View(context)
View(wea)
context$data.wea = getWeatherForecast() %>% rowwise() %>%
mutate(dist = geogDist(lng, lat, context$plotlng, context$plotlat)) %>% arrange(dist)
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/bzmap_funcs.R")
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
?tabsetPanel
install.packages("shinywidgets")
install.packages("shinyWidgets")
library(shinyWidgets)
?verticalTabsetPanel
context$data[[1]]
context$data[[1]][ ,5:11]
context$data[[1]][11]
names(context$data[[1]])
context$data[[1]][10]
context$data[[1]][11]
context$data[[1]][11][1]
context$data[[1]][11][[1]]
runApp('newApp.R')
runApp('newApp.R')
# region events ###############################################################
# check if input data is valid, throws errors if not
dataValidation <- function(names, labels, fields){
if(length(names) != length(labels)) stop("Error: Not all FileName is associated with a Label")
if(length(names) != length(fields)) stop("Error: Not all FileName is associated with a Field")
if(!(mode(names) %in% c("character")) || !(mode(labels) %in% c("character")) || !(mode(fields) %in% c("character"))) stop("Error: data not characters")
}
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
context$data[[1]]
context$data[[1]][,5:11]
context$data[[1]][[11]]
context$data[[1]][[11]][[1]]
context$data[[1]][[11]][1]
context$data[[1]][11][1]
context$data[[1]][11]
View(context)
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
context$nearbyList
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
source("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG/bzmap_events.R")
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
match = NULL
for (i in 1:context$length) {
dat = context$data[[1]] %>% mutate(tlng = click$lng, tlat = click$lat) %>%
mutate(dist = geogVecDist(lng, lat, tlng, tlat)) %>% arrange(dist)
fst = head(dat, 1)
if(is.null(match)) match = fst
else if (match$dist > fst$dist) match = fst
}
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
runApp('newApp.R')
install.packages("devtools")
runApp('newApp.R')
