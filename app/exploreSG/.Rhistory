View(Property.Price.by.Country)
Property.Price.by.Country = property.prices %>%
group_by(Country, Year) %>%
mutate(Avg.Price.To.Income.Ratio=mean(Price.To.Income.Ratio)) %>%
select(Year, Country, Avg.Price.To.Income.Ratio)
View(Property.Price.by.Country)
countries = Property.Price.by.Country$Country
countries = unique(countries)
countries = unique(Property.Price.by.Country$Country)
test =  Property.Price.by.Country %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (value-lag(value, default = NA))/lag(value, default = NA))
test = Property.Price.by.Country %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Price.To.Income.Ratio-lag(Price.To.Income.Ratio, default = NA))/lag(Price.To.Income.Ratio, default = NA))
test = = property.prices %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Price.To.Income.Ratio-lag(Price.To.Income.Ratio, default = NA))/lag(Price.To.Income.Ratio, default = NA))
test = property.prices %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Price.To.Income.Ratio-lag(Price.To.Income.Ratio, default = NA))/lag(Price.To.Income.Ratio, default = NA))
View(test)
Property.Price.by.Country = Property.Price.by.Country %>%
group_by(Country, Year) %>%
mutate(Avg.Price.To.Income.Ratio=mean(Price.To.Income.Ratio)) %>%
select(Year, Country, Avg.Price.To.Income.Ratio)
Property.Price.by.Country = property.prices %>%
group_by(Country, Year) %>%
mutate(Avg.Price.To.Income.Ratio=mean(Price.To.Income.Ratio)) %>%
select(Year, Country, Avg.Price.To.Income.Ratio)
countries = unique(Property.Price.by.Country$Country)
Property.Price.by.Country = Property.Price.by.Country %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Avg.Price.To.Income.Ratio-lag(Avg.Price.To.Income.Ratio, default = NA))/lag(Avg.Price.To.Income.Ratio, default = NA))
View(Property.Price.by.Country)
Property.Price.by.Country = property.prices %>%
group_by(Country, Year) %>%
mutate(Avg.Price.To.Income.Ratio=mean(Price.To.Income.Ratio)) %>%
select(Year, Country, Avg.Price.To.Income.Ratio)
Property.Price.by.Country = Property.Price.by.Country %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Avg.Price.To.Income.Ratio-lag(Avg.Price.To.Income.Ratio, default = NA))/lag(Avg.Price.To.Income.Ratio, default = NA))
print(Property.Price.by.Country %>%
group_by(Country) %>%
summarise(Ave.Annual.Growth=sum(Avg.Price.To.Income.Ratio)) %>%
arrange(Ave.Annual.Growth) %>%
bottom(1))
Property.Price.by.Country = property.prices %>%
group_by(Country, Year) %>%
mutate(Avg.Price.To.Income.Ratio=mean(Price.To.Income.Ratio)) %>%
select(Year, Country, Avg.Price.To.Income.Ratio)
Property.Price.by.Country = Property.Price.by.Country %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Avg.Price.To.Income.Ratio-lag(Avg.Price.To.Income.Ratio, default = NA))/lag(Avg.Price.To.Income.Ratio, default = NA))
print(Property.Price.by.Country %>%
group_by(Country) %>%
summarise(Ave.Annual.Growth=sum(Avg.Price.To.Income.Ratio)) %>%
arrange(Ave.Annual.Growth) %>%
tail(1))
Property.Price.by.Country = property.prices %>%
group_by(Country, Year) %>%
mutate(Avg.Price.To.Income.Ratio=mean(Price.To.Income.Ratio)) %>%
select(Year, Country, Avg.Price.To.Income.Ratio)
Property.Price.by.Country = Property.Price.by.Country %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Avg.Price.To.Income.Ratio-lag(Avg.Price.To.Income.Ratio, default = NA))/lag(Avg.Price.To.Income.Ratio, default = NA))
print(Property.Price.by.Country %>%
group_by(Country) %>%
summarise(Ave.Annual.Growth=mean(Avg.Growth.Rate)) %>%
arrange(Ave.Annual.Growth) %>%
tail(1))
Property.Price.by.Country = property.prices %>%
group_by(Country, Year) %>%
mutate(Avg.Price.To.Income.Ratio=mean(Price.To.Income.Ratio)) %>%
select(Year, Country, Avg.Price.To.Income.Ratio)
Property.Price.by.Country = Property.Price.by.Country %>%
group_by(Country) %>%
arrange(Year) %>%
mutate(Annual.Growth.Rate = (Avg.Price.To.Income.Ratio-lag(Avg.Price.To.Income.Ratio, default = NA))/lag(Avg.Price.To.Income.Ratio, default = NA))
print(Property.Price.by.Country %>%
group_by(Country) %>%
summarise(Ave.Annual.Growth=mean(Annual.Growth.Rate)) %>%
arrange(Ave.Annual.Growth) %>%
tail(1))
install.packages(shiny)
install.packages("shiny")
shiny::runApp('Assignments/App')
install.packages("leaflet")
library(leaflet)
runApp('Assignments/App')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='tomlbz',
token='0A09CE315A161FDE66F10B0173342CB6',
secret='05iaKH/bJKOtJQ26bIBOmmUZLdxyg//MsqSQH1pB')
library(rsconnect)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(dslabs)
library(readxl)
library(curl)
library(XML)
library(jsonlite)
library(xml2)
library(rvest)
library(ggplot2)
library(gapminder)
library(gganimate)
library(png)
library(gifski)
library(ggmap)
ggmap::register_google(key='AIzaSyAPypfkt7AxQ7o2r96Xw1-HJzXcBEnh-Nc')
library(raster)
library(rgdal)
library(leaflet)
library(tidyverse)
library(leaflet.extras)
library(tigris)
library(scales)
library(broom)
library(rnaturalearth)
library(DT)
library(sf)
library(tmap)
library(reshape2)
library(lubridate)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(dslabs)
library(readxl)
library(curl)
library(XML)
library(jsonlite)
library(xml2)
library(rvest)
library(ggplot2)
library(gapminder)
library(gganimate)
library(png)
library(gifski)
library(ggmap)
ggmap::register_google(key='AIzaSyAPypfkt7AxQ7o2r96Xw1-HJzXcBEnh-Nc')
library(raster)
library(rgdal)
library(leaflet)
library(tidyverse)
library(leaflet.extras)
library(tigris)
library(scales)
library(broom)
library(rnaturalearth)
library(DT)
library(sf)
library(tmap)
library(reshape2)
library(lubridate)
data <- read.csv("Kickstarter.csv")
q1data = data %>%
group_by(maincategory) %>%
mutate(IsSuccessful=ifelse(state=="successful",1,0)) %>%
summarise(success_rate=sum(IsSuccessful)/n()) %>%
arrange(success_rate)
ggplot(
data = q1data,
aes(
x=reorder(maincategory, success_rate),
y=success_rate)) +
geom_bar(
stat = 'identity',
fill='lightblue',
width=0.5) +
theme(axis.text.x = element_text(angle=90))
q2data = data %>%
group_by(maincategory) %>%
mutate(IsSuccessful=ifelse(state=="successful",1,0)) %>%
summarise(total_number=n(),success_rate=sum(IsSuccessful)/n()) %>%
arrange(success_rate)
scalef = max(q2data$success_rate)/max(q2data$total_number)
ggplot(
data = q2data,
aes(
x=reorder(maincategory, success_rate),
y=success_rate)) +
geom_bar(
stat = 'identity',
fill='blue',
width=0.4,
position=position_nudge(-0.2)) +
geom_bar(
aes(y = scalef * total_number),
stat = 'identity',
fill='coral',
width=0.4,
position=position_nudge(0.2)) +
scale_y_continuous(
"Success Rates",
sec.axis = sec_axis(~./scalef, name = "Total Number")) +
theme(
axis.text.x = element_text(angle=90),
axis.text.y.left = element_text(color = 'blue'),
axis.text.y.right = element_text(color = 'coral'))
sproj <- data[data$state=="successful",c('launched_at', 'deadline')]
uproj <- data[data$state!="successful",c('launched_at', 'deadline')]
sproj$start <- dmy(sproj$launched_at)
sproj$ddl <- dmy(sproj$deadline)
sproj$duration <- as.integer(difftime(sproj$ddl, sproj$start, units="days"))
uproj$start <- dmy(uproj$launched_at)
uproj$ddl <- dmy(uproj$deadline)
uproj$duration <- as.integer(difftime(uproj$ddl, uproj$start, units="days"))
densitydata = data.frame(
duration=c(sproj$duration, uproj$duration),
lines=c(rep("succeesful",nrow(sproj)),rep("unsuccessful",nrow(uproj))))
ggplot(densitydata, aes(x=duration,fill=lines))+geom_density(alpha=0.5)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=goal,y=duration)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth() +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth() +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_binned(n.breaks = 3) +
#scale_x_log10(breaks=c(1,10,100)) +
geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_binned(n.breaks = 10) +
#scale_x_log10(breaks=c(1,10,100)) +
geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_discrete() +
#scale_x_log10(breaks=c(1,10,100)) +
geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_discrete() +
stat_smooth()
#scale_x_log10(breaks=c(1,10,100)) +
#geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_discrete() +
stat_smooth(method = "lm")
#scale_x_log10(breaks=c(1,10,100)) +
#geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_discrete() +
stat_smooth(method = "glm")
#scale_x_log10(breaks=c(1,10,100)) +
#geom_smooth() #+
#annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth(method = "lm") +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth(method="loess") +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=duration,y=stateNumeric)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth(method="gam") +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
ggplot(datam,aes(x=goal,y=duration)) +
geom_point(position=position_jitter(w=0.05,h=0.05)) +
scale_x_log10(breaks=c(1,10,100)) +
geom_smooth() +
annotation_logticks(sides="bt")
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
splitted = split(datam,cut(datam$duration,10))
View(splitted)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = nrows(durationvec) / 10;
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = nrow(durationvec) / 10;
dvec = rep(0,10)
for (i in 1:10) {
dvec[i] = durationvec[dn * i]
}
nrow(durationvec)
ncol(durationvec)
length(durationvec)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 10;
dvec = rep(0,10)
for (i in 1:10) {
dvec[i] = durationvec[dn * i]
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
lst = c("a",1,dvec)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
lst[i] = datam %>% filter(duration < dvec[i])
}
View(lst)
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="success",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
tmp = datam %>% filter(duration < 30)
sum(tmp$stateNumeric)
View(tmp)
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
plot(dvec, rates)
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
plot(c("<30","30-31",">31"), rates)
datam = data %>%
mutate(stateNumeric=ifelse(state=="successful",1,0)) %>%
mutate(start=dmy(launched_at), ddl=dmy(deadline)) %>%
mutate(duration=as.integer(
difftime(ddl, start, units="days")))
durationvec = sort(datam$duration);
dn = length(durationvec) / 3;
dvec = rep(0,3)
rates = rep(0.1,3)
for (i in 1:3) {
dvec[i] = durationvec[dn * i]
tmp = datam %>% filter(duration < dvec[i])
rates[i] = sum(tmp$stateNumeric)/nrow(tmp)
}
plot(c(1,2,3), rates)
setwd("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG")
setwd("E:/6_NUS_Files/BizAd Files/Y3S2/DBA3702/ProjectCode/exploreSG/app/exploreSG")
